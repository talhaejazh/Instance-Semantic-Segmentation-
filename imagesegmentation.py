# -*- coding: utf-8 -*-
"""ImageSegmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DAtKdc_1gbM-6kLnmE6lhTJn4XmVSypx
"""

!nvidia-smi

import tensorflow as tf
print(tf.__version__)

!pip install tensorflow==2.2

print(tf.__version__)

from google.colab import drive
drive.mount('/content/drive')





!pip install pixellib

from google.colab import files
uploaded=files.upload()

import matplotlib.pyplot as plt
import cv2
plt.rcParams["figure.figsize"]=(20,20)
image=cv2.imread("/content/drive/MyDrive/Cv/imageCV.jpg")
plt.imshow(image)

!wget --quiet https://github.com/matterport/Mask_RCNN/releases/download/v2.0/mask_rcnn_coco.h5

# Commented out IPython magic to ensure Python compatibility.
# %ls

import pixellib
from pixellib.instance import instance_segmentation



segment_image=instance_segmentation()
segment_image.load_model("/content/drive/MyDrive/Cv/mask_rcnn_coco.h5")

segment_image.segmentImage("/content/drive/MyDrive/Cv/imageCV.jpg", show_bboxes=True, output_image_name="output_imageCV_image.jpg")
image1=cv2.imread("output_imageCV_image.jpg")
plt.rcParams["figure.figsize"]=(25,25)
plt.imshow(image1)

cv2.imwrite('output_image_Inst_CV_image.jpg',image1)

"""**Load The Video**

"""

from IPython.display import HTML
from base64 import b64encode

video_path='/content/drive/MyDrive/Cv/RoadData.mp4'
def show_video(video_path,video_width=600):
    video_file = open(video_path,'rb').read()
    video_url = "data:video/mp4;base64," + b64encode(video_file).decode()
    return HTML(f"""<video width=400 controls><source src="{video_url}" type="video/mp4"></video>""")

show_video(video_path)

"""**Apply Instance Segmentation**"""

import pixellib
from pixellib.instance import instance_segmentation

segment_video=instance_segmentation()
segment_video.load_model("/content/drive/MyDrive/Cv/mask_rcnn_coco.h5")
segment_video.process_video(video_path,show_bboxes=True,frames_per_second= 15, output_video_name="path_to_outputvideo.mp4")

import os

video_path1 = "path_to_outputvideo.mp4"
video_h264_path = "./output_h264.mp4"

os.system(f"ffmpeg -i {video_path1} -vcodec libx264 {video_h264_path}")

"""**Output of the Video**"""

from os import read
from IPython.display import HTML
from base64 import b64encode

def show_video(video_h264_path, video_width= 600):

  video_file = open(video_h264_path, "r+b").read()
  video_url = "data:video/mp4;base64," + b64encode(video_file).decode()
  return HTML(f"""<video width=400 controls><source src="{video_url}" type="video/mp4"></video>""")

show_video(video_h264_path)

import pixellib
from pixellib.semantic import semantic_segmentation



import pixellib
from pixellib.semantic import semantic_segmentation

segment_image = semantic_segmentation()
segment_image.load_ade20k_model("/content/drive/MyDrive/Cv/deeplabv3_xception65_ade20k.h5")
segment_image.segmentAsAde20k("/content/drive/MyDrive/Cv/imageCV.jpg", overlay = True, output_image_name="image_new.jpg")

image2=cv2.imread("image_new.jpg")
plt.rcParams["figure.figsize"]=(25,25)
plt.imshow(image2)

"""**Save Image**

"""

cv2.imwrite('output_CSU_image_Semantic_CV_image.jpg',image2)

"""**Semantic Video**"""

import pixellib
from pixellib.semantic import semantic_segmentation

segment_video = semantic_segmentation()
segment_video.load_ade20k_model("/content/drive/MyDrive/Cv/deeplabv3_xception65_ade20k.h5")
segment_video.process_video_ade20k(video_path, overlay = True, frames_per_second= 15, output_video_name="output_CSU_Sementic_video.mp4")

import os

video_path2 = "output_CSU_Sementic_video.mp4"
video_h364_path = "./output_h364.mp4"

os.system(f"ffmpeg -i {video_path2} -vcodec libx264 {video_h364_path}")

from os import read
from IPython.display import HTML
from base64 import b64encode

def show_video(video_h364_path, video_width= 600):

  video_file = open(video_h364_path, "r+b").read()
  video_url = "data:video/mp4;base64," + b64encode(video_file).decode()
  return HTML(f"""<video width=400 controls><source src="{video_url}" type="video/mp4"></video>""")

show_video(video_h364_path)